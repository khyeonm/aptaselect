// Generated by CoffeeScript 1.8.0

/*
jbfilereader.coffee

Copyright (c) 2015 Jeongbin Park

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 */
var jbfilereader, jbfilereadersync, _inflater;

import pako from 'pako';

_inflater = (function() {
  function _inflater() {
    var enable_windows_gzip, that, window_bits;
    window_bits = 15;
    enable_windows_gzip = 32;
    this.inflater_pako = new pako.Inflate({
      to: 'string',
      chunkSize: 16384,
      windowBits: window_bits | enable_windows_gzip
    });
    this.inflating_buffer = '';
    that = this;
    this.inflater_pako.onData = function(chunk) {
      that.inflating_buffer += chunk;
    };
    return;
  }

  _inflater.prototype.decompress = function(chunk, islastchunk) {
    this.inflating_buffer = '';
    this.inflater_pako.push(chunk, islastchunk);
    this.ended = this.inflater_pako.ended;
    this.strm = this.inflater_pako.strm;
    return this.inflating_buffer;
  };

  return _inflater;

})();

jbfilereadersync = (function() {
  function jbfilereadersync(file, gzipped) {
    this.file = file;
    this.gzipped = gzipped;
    this.buffer = '';
    this.filesize = this.file.size;
    this.chunksize = 1024 * 512;
    this.reader = new FileReaderSync();
    if (this.gzipped) {
      this.inflater = new _inflater();
    }
    this.islastchunk = false;
    this.fpos = 0;
    this.endpos = 0;
    this.eof = false;
    return;
  }

  jbfilereadersync.prototype._getchunk = function() {
    var blob, raw_array, rel_pos, remaining_bytes, s;
    if (this.fpos + this.chunksize >= this.filesize) {
      this.endpos = this.filesize;
      this.islastchunk = true;
    } else {
      this.endpos = this.fpos + this.chunksize;
    }
    blob = this.file.slice(this.fpos, this.endpos);
    this.fpos += this.endpos - this.fpos;
    if (this.gzipped) {
      raw_array = new Uint8Array(this.reader.readAsArrayBuffer(blob));
      s = this.inflater.decompress(raw_array, this.islastchunk);
      if (s) {
        if (this.inflater.ended && (this.inflater.strm.avail_in || !this.islastchunk)) {
          remaining_bytes = this.inflater.strm.avail_in;
          rel_pos = 0;
          while (raw_array[raw_array.byteLength - remaining_bytes + rel_pos] === 0) {
            rel_pos++;
          }
          this.fpos -= remaining_bytes - rel_pos;
          this.inflater = new _inflater();
        }
      } else {
        throw 'Something wrong with the gzipped file!';
      }
    } else {
      s = this.reader.readAsText(blob);
    }
    return s;
  };

  jbfilereadersync.prototype.readline = function() {
    var lfpos, result;
    if (this.eof) {
      return "";
    }
    lfpos = this.buffer.indexOf("\n");
    while (lfpos === -1) {
      if (this.fpos >= this.filesize) {
        result = this.buffer;
        this.buffer = "";
        this.fpos = this.filesize;
        this.eof = true;
        return result;
      }
      this.buffer += this._getchunk();
      lfpos = this.buffer.indexOf("\n");
    }
    if (this.buffer[lfpos - 1] === "\r") {
      result = this.buffer.slice(0, lfpos - 1);
    } else {
      result = this.buffer.slice(0, lfpos);
    }
    this.buffer = this.buffer.slice(lfpos + 1);
    return result;
  };

  return jbfilereadersync;

})();

jbfilereader = (function() {
  function jbfilereader(file, gzipped) {
    this.file = file;
    this.gzipped = gzipped;
    this.buffer = '';
    this.filesize = this.file.size;
    this.chunksize = 1024 * 512;
    this.reader = new FileReader();
    if (this.gzipped) {
      this.inflater = new _inflater();
    }
    this.islastchunk = false;
    this.fpos = 0;
    this.endpos = 0;
    this.eof = false;
    return;
  }

  jbfilereader.prototype._readblob = function(blob) {
    var readpromise, that;
    that = this;
    readpromise = new Promise(function(resolve, reject) {
      that.reader.onload = function(e) {
        return resolve(e.target.result);
      };
      that.reader.onerror = function() {
        return reject();
      };
    });
    if (this.gzipped) {
      this.reader.readAsArrayBuffer(blob);
    } else {
      this.reader.readAsText(blob);
    }
    return readpromise;
  };

  jbfilereader.prototype._getchunk = function() {
    var blob, chunkpromise, that;
    if (this.fpos + this.chunksize >= this.filesize) {
      this.endpos = this.filesize;
      this.islastchunk = true;
    } else {
      this.endpos = this.fpos + this.chunksize;
    }
    blob = this.file.slice(this.fpos, this.endpos);
    that = this;
    chunkpromise = new Promise(function(resolve, reject) {
      var readpromise;
      readpromise = that._readblob(blob);
      return readpromise.then(function(s) {
        var raw_array, rel_pos, remaining_bytes;
        that.fpos += that.endpos - that.fpos;
        if (that.gzipped) {
          raw_array = new Uint8Array(s);
          s = that.inflater.decompress(raw_array, that.islastchunk);
          if (s) {
            if (that.inflater.ended && (that.inflater.strm.avail_in || !that.islastchunk)) {
              remaining_bytes = that.inflater.strm.avail_in;
              rel_pos = 0;
              while (raw_array[raw_array.byteLength - remaining_bytes + rel_pos] === 0) {
                rel_pos++;
              }
              that.fpos -= remaining_bytes - rel_pos;
              that.inflater = new _inflater();
            }
          } else {
            alert('Something wrong with the gzipped file!');
            reject();
          }
        }
        that.buffer += s;
        resolve();
      })["catch"](function(s) {
        alert('Something wrong while reading file!');
        reject();
      });
    });
    return chunkpromise;
  };

  jbfilereader.prototype.readline = function(callback) {
    var datapromise, lfpos, result, that;
    if (this.eof) {
      callback("");
    }
    lfpos = this.buffer.indexOf("\n");
    if (lfpos === -1) {
      if (this.fpos >= this.filesize) {
        result = this.buffer;
        this.buffer = "";
        this.eof = true;
        callback(result);
      } else {
        that = this;
        datapromise = this._getchunk();
        datapromise.then(function() {
          return that.readline(callback);
        });
      }
    } else {
      if (this.buffer[lfpos] === "\r") {
        result = this.buffer.slice(0, lfpos - 1);
      } else {
        result = this.buffer.slice(0, lfpos);
      }
      this.buffer = this.buffer.slice(lfpos + 1);
      callback(result);
    }
  };

  return jbfilereader;

})();

export { jbfilereader, jbfilereadersync };